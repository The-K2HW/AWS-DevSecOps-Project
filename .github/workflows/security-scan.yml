name: Security Scan 

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 1'
    
permissions:
  contents: read
  security-events: write
  actions: read

env:
  PRODUCT_NAME: ${{ secrets.DD_PRODUCT_NAME }}
  DD_HOST: ${{ secrets.DD_HOST }}
  TZ: "Europe/Paris"

jobs:
  security-scan:
    name: Security Scan Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # -------------------------------
      # PHASE 1: PREPARATION
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set Scan Metadata
        id: metadata
        run: |
          echo "scan_date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "scan_time=$(date +%H:%M:%S)" >> $GITHUB_OUTPUT
          echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          ENGAGEMENT="${GITHUB_REF#refs/heads/}-$(date +%Y%m%d-%H%M%S)"
          echo "engagement_name=$ENGAGEMENT" >> $GITHUB_OUTPUT
          echo "Scan Metadata:"
          echo "  Date: $(date +%Y-%m-%d)"
          echo "  Branch: ${GITHUB_REF#refs/heads/}"
          echo "  Commit: $(git rev-parse --short HEAD)"
          echo "  Engagement: $ENGAGEMENT"

      # Install Semgrep for JSON output
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Semgrep
        run: |
          pip install semgrep
          semgrep --version
      
      # -------------------------------
      # CREATE DEFECTDOJO ENGAGEMENT
      # -------------------------------
      - name: Create DefectDojo Engagement
        id: create_engagement
        run: |
          echo "=== Creating DefectDojo Engagement ==="
          echo "Product: ${PRODUCT_NAME}"
          echo "Engagement: ${{ steps.metadata.outputs.engagement_name }}"
          
          # First, get the product ID - encode the product name for URL
          ENCODED_PRODUCT_NAME=$(echo "${PRODUCT_NAME}" | sed 's/ /%20/g')
          PRODUCT_RESPONSE=$(curl -s -X GET "${DD_HOST}/api/v2/products/?name=${ENCODED_PRODUCT_NAME}" \
            -H "Authorization: Token ${{ secrets.DD_API_TOKEN }}")
          
          echo "Product API Response: $PRODUCT_RESPONSE"
          
          PRODUCT_ID=$(echo "$PRODUCT_RESPONSE" | jq -r '.results[0].id // empty')
          
          if [ -z "$PRODUCT_ID" ]; then
            echo "Warning: Product lookup by name failed. Trying to get all products..."
            ALL_PRODUCTS=$(curl -s -X GET "${DD_HOST}/api/v2/products/" \
              -H "Authorization: Token ${{ secrets.DD_API_TOKEN }}")
            
            echo "All Products: $ALL_PRODUCTS"
            
            # Try to find product by name in the list
            PRODUCT_ID=$(echo "$ALL_PRODUCTS" | jq -r ".results[] | select(.name==\"${PRODUCT_NAME}\") | .id // empty" | head -1)
            
            if [ -z "$PRODUCT_ID" ]; then
              echo "Error: Product '${PRODUCT_NAME}' not found in DefectDojo"
              echo "Available products:"
              echo "$ALL_PRODUCTS" | jq -r '.results[].name'
              exit 1
            fi
          fi
          
          echo "Product ID: $PRODUCT_ID"
          
          # Create the engagement
          ENGAGEMENT_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "${DD_HOST}/api/v2/engagements/" \
            -H "Authorization: Token ${{ secrets.DD_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"name\": \"${{ steps.metadata.outputs.engagement_name }}\",
              \"description\": \"Automated security scan from GitHub Actions\",
              \"product\": $PRODUCT_ID,
              \"target_start\": \"${{ steps.metadata.outputs.scan_date }}\",
              \"target_end\": \"${{ steps.metadata.outputs.scan_date }}\",
              \"status\": \"In Progress\",
              \"engagement_type\": \"CI/CD\",
              \"build_id\": \"${{ github.run_number }}\",
              \"commit_hash\": \"${{ github.sha }}\",
              \"branch_tag\": \"${{ steps.metadata.outputs.branch }}\"
            }")
          
          HTTP_CODE=$(echo "$ENGAGEMENT_RESPONSE" | grep -oP 'HTTP_CODE:\K\d+' || echo "0")
          RESPONSE_BODY=$(echo "$ENGAGEMENT_RESPONSE" | sed 's/HTTP_CODE:.*//')
          
          echo "=== Engagement Creation Response ==="
          echo "HTTP Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
            ENGAGEMENT_ID=$(echo "$RESPONSE_BODY" | jq -r '.id // empty')
            echo "✓ Engagement created successfully"
            echo "Engagement ID: $ENGAGEMENT_ID"
            echo "engagement_id=$ENGAGEMENT_ID" >> $GITHUB_OUTPUT
          else
            echo "✗ Failed to create engagement (HTTP $HTTP_CODE)"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi
        continue-on-error: false
          	
      # -------------------------------
      # PHASE 2: STATIC ANALYSIS (SAST)
      # -------------------------------
      - name: Run Semgrep (SAST) - Generate JSON for DefectDojo
        run: |
          echo "Running Semgrep scan..."
          semgrep --config=p/php --json --output=semgrep.json . || true
          echo "Semgrep JSON report generated"
        continue-on-error: true
        
      - name: Run Semgrep (SAST) - Generate SARIF for GitHub
        run: |
          echo "Running Semgrep scan for GitHub Security..."
          semgrep --config=p/php --sarif --output=semgrep.sarif . || true
          echo "Semgrep SARIF report generated"
        continue-on-error: true
        
      - name: Upload Semgrep to GitHub Security Dashboard
        if: always() && hashFiles('semgrep.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep-sast
        continue-on-error: true
        
      - name: Upload Semgrep to DefectDojo
        if: always() && hashFiles('semgrep.json') != ''
        run: |
          echo "=== Uploading Semgrep results to DefectDojo ==="
          echo "File: semgrep.json"
          echo "Size: $(ls -lh semgrep.json | awk '{print $5}')"
          echo "Engagement ID: ${{ steps.create_engagement.outputs.engagement_id }}"
          
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "${DD_HOST}/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DD_API_TOKEN }}" \
            -F "scan_type=Semgrep JSON Report" \
            -F "file=@semgrep.json" \
            -F "engagement=${{ steps.create_engagement.outputs.engagement_id }}" \
            -F "scan_date=${{ steps.metadata.outputs.scan_date }}" \
            -F "active=true" \
            -F "verified=false" \
            -F "close_old_findings=false" \
            -F "test_title=Semgrep SAST - ${{ steps.metadata.outputs.commit_sha }}")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep -oP 'HTTP_CODE:\K\d+' || echo "0")
          RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_CODE:.*//')
          
          echo "=== Response ==="
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "✓ Semgrep uploaded successfully to DefectDojo"
          else
            echo "✗ Upload failed with HTTP $HTTP_CODE"
            echo "Full response: $RESPONSE"
          fi
        continue-on-error: true

      # -------------------------------
      # PHASE 3: INFRASTRUCTURE SECURITY (IaC)
      # -------------------------------
      - name: Run Trivy IaC Scan - JSON for DefectDojo
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: ./infra
          format: 'json'
          output: 'trivy-iac.json'
          exit-code: '0'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      - name: Run Trivy IaC Scan - SARIF for GitHub
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: ./infra
          format: 'sarif'
          output: 'tfsec-results.sarif'
          exit-code: '0'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      - name: Upload Trivy IaC results to GitHub Security Dashboard
        if: always() && hashFiles('tfsec-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec-results.sarif
          category: trivy-iac     
        continue-on-error: true
       
      - name: Upload Trivy IaC to DefectDojo
        if: always() && hashFiles('trivy-iac.json') != ''
        run: |
          echo "=== Uploading Trivy IaC results to DefectDojo ==="
          echo "File: trivy-iac.json"
          echo "Size: $(ls -lh trivy-iac.json | awk '{print $5}')"
          echo "Engagement ID: ${{ steps.create_engagement.outputs.engagement_id }}"
          
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "${DD_HOST}/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DD_API_TOKEN }}" \
            -F "scan_type=Trivy Operator Scan" \
            -F "file=@trivy-iac.json" \
            -F "engagement=${{ steps.create_engagement.outputs.engagement_id }}" \
            -F "scan_date=${{ steps.metadata.outputs.scan_date }}" \
            -F "active=true" \
            -F "verified=false" \
            -F "test_title=Trivy IaC Scan - ${{ steps.metadata.outputs.commit_sha }}")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep -oP 'HTTP_CODE:\K\d+' || echo "0")
          RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_CODE:.*//')
          
          echo "=== Response ==="
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "✓ Trivy IaC uploaded successfully to DefectDojo"
          else
            echo "✗ Upload failed with HTTP $HTTP_CODE"
          fi
        continue-on-error: true

      # -------------------------------
      # PHASE 4: CONTAINER BUILD
      # -------------------------------
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/research-app:${{ steps.metadata.outputs.commit_sha }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/research-app:${{ steps.metadata.outputs.commit_sha }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest
          echo "Image built successfully"

      # -------------------------------
      # PHASE 5: CONTAINER SECURITY (SCA)
      # -------------------------------
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest
          format: 'json'
          output: 'trivy-results.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'vuln,secret,config'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          exit-code: '0'
        continue-on-error: true

      - name: Convert Trivy JSON to SARIF
        if: always() && hashFiles('trivy-results.json') != ''
        run: |
          echo "Converting Trivy JSON to SARIF format..."
          docker run --rm -v $(pwd):/data aquasec/trivy convert \
            --format sarif \
            --output /data/trivy-results.sarif \
            /data/trivy-results.json
          echo "Conversion complete"
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security Dashboard
        if: always() && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy-image
        continue-on-error: true

      - name: Upload Trivy Image to DefectDojo
        if: always() && hashFiles('trivy-results.json') != ''
        run: |
          echo "=== Uploading Trivy Container scan results to DefectDojo ==="
          echo "File: trivy-results.json"
          echo "Size: $(ls -lh trivy-results.json | awk '{print $5}')"
          echo "Engagement ID: ${{ steps.create_engagement.outputs.engagement_id }}"
          
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "${DD_HOST}/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DD_API_TOKEN }}" \
            -F "scan_type=Trivy Scan" \
            -F "file=@trivy-results.json" \
            -F "engagement=${{ steps.create_engagement.outputs.engagement_id }}" \
            -F "scan_date=${{ steps.metadata.outputs.scan_date }}" \
            -F "active=true" \
            -F "verified=false" \
            -F "test_title=Trivy Container Scan - ${{ steps.metadata.outputs.commit_sha }}")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep -oP 'HTTP_CODE:\K\d+' || echo "0")
          RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_CODE:.*//')
          
          echo "=== Response ==="
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "✓ Trivy Container scan uploaded successfully to DefectDojo"
          else
            echo "✗ Upload failed with HTTP $HTTP_CODE"
          fi
        continue-on-error: true

      - name: Evaluate vulnerability severity
        id: eval
        if: always()
        run: |
          if [ -f "trivy-results.json" ]; then
            critical=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json 2>/dev/null || echo 0)
            high=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json 2>/dev/null || echo 0)
            echo "Detected $critical critical vulnerabilities."
            echo "Detected $high high vulnerabilities."
            echo "critical=$critical" >> $GITHUB_OUTPUT
            echo "high=$high" >> $GITHUB_OUTPUT
          else
            echo "No Trivy results found"
            echo "critical=0" >> $GITHUB_OUTPUT
            echo "high=0" >> $GITHUB_OUTPUT
          fi

      - name: Fail pipeline on critical vulnerabilities
        if: steps.eval.outputs.critical != '0'
        run: |
          echo "CRITICAL VULNERABILITIES FOUND: Security scan failed."
          echo "Found ${{ steps.eval.outputs.critical }} critical vulnerabilities"
          echo "Review findings in DefectDojo: ${DD_HOST}"
          echo "Check trivy-results.json for details."
          exit 1

      # -------------------------------
      # PHASE 6: DEPLOYMENT
      # -------------------------------
      - name: Push Docker image
        if: success()
        run: |
          echo "Pushing Docker image to registry..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/research-app:${{ steps.metadata.outputs.commit_sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest
          echo "Image pushed successfully"

      # -------------------------------
      # PHASE 7: DYNAMIC TESTING (DAST)
      # -------------------------------
      - name: Start application container for DAST
        if: success() || failure()
        run: |
          echo "Starting PHP application for DAST..."
          docker run -d --name test-app \
            -p 8080:80 \
            --health-cmd="curl -fs http://localhost:80 || exit 1" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=10 \
            ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest
      
          echo "Waiting for the app to become healthy..."
          timeout 60 bash -c 'until docker inspect --format="{{.State.Health.Status}}" test-app | grep -q "healthy"; do sleep 3; done'
          echo "Application is ready for DAST scanning."

      - name: Fix workspace permissions for ZAP
        run: sudo chmod -R 777 ${{ github.workspace }}
        
      - name: Run OWASP ZAP Full Scan
        if: always()
        run: |
          echo "Running ZAP full scan..."
          docker run --rm -v $(pwd):/zap/wrk/:rw --network=host \
            ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
            -t http://localhost:8080 \
            -J report_json.json \
            -w report_md.md \
            -r report_html.html \
            -x report_xml.xml \
            -I \
            -a -j -l WARN -T 30 \
            -z "-config spider.maxDuration=5 -config ajaxSpider.maxDuration=3" || true

          echo "ZAP scan completed. Reports generated:"
          ls -lh report_* || echo "No reports found"
        continue-on-error: true

      - name: Convert ZAP JSON to SARIF format
        if: always()
        run: |
          python3 <<'PYTHON_SCRIPT'
          import json, os
      
          if not os.path.exists("report_json.json"):
              print("No ZAP report found, creating empty SARIF")
              empty = {
                  "version": "2.1.0",
                  "runs": [{
                      "tool": {"driver": {"name": "OWASP ZAP"}},
                      "results": []
                  }]
              }
              json.dump(empty, open("zap-results.sarif", "w"), indent=2)
              exit(0)
      
          zap = json.load(open("report_json.json"))
          risk_map = {"High": "error", "Medium": "warning", "Low": "note", "Informational": "note"}
          rules, results = {}, []
      
          os.makedirs("zap_scan", exist_ok=True)
      
          for site in zap.get("site", []):
              for alert in site.get("alerts", []):
                  pid = str(alert.get("pluginid"))
                  name = alert.get("name", "Unknown")
                  risk = alert.get("riskdesc", "Low").split()[0]
      
                  if pid not in rules:
                      rules[pid] = {
                          "id": pid,
                          "name": name,
                          "shortDescription": {"text": name}
                      }
      
                  for inst in alert.get("instances", []):
                      uri = inst.get("uri", "unknown")
                      file_path = "zap_scan/" + os.path.basename(uri)
      
                      results.append({
                          "ruleId": pid,
                          "level": risk_map.get(risk, "note"),
                          "message": {"text": name},
                          "locations": [{
                              "physicalLocation": {
                                  "artifactLocation": {
                                      "uri": file_path,
                                      "uriBaseId": "PROJECTROOT"
                                  }
                              }
                          }]
                      })
      
          sarif = {
              "version": "2.1.0",
              "runs": [{
                  "tool": {"driver": {
                      "name": "OWASP ZAP",
                      "rules": list(rules.values())
                  }},
                  "results": results
              }]
          }
      
          json.dump(sarif, open("zap-results.sarif", "w"), indent=2)
          print(f"SARIF created with {len(results)} findings.")
          PYTHON_SCRIPT
        continue-on-error: true
        
      - name: Upload ZAP SARIF results
        if: always() && hashFiles('zap-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-results.sarif
          category: owasp-zap-dast
        continue-on-error: true

      - name: Upload ZAP to DefectDojo
        if: always() && (hashFiles('report_xml.xml') != '' || hashFiles('report_json.json') != '')
        run: |
          echo "=== Uploading ZAP results to DefectDojo ==="
          
          if [ -f "report_json.json" ]; then
            FILE_TO_UPLOAD="report_json.json"
            echo "Using JSON format"
          elif [ -f "report_xml.xml" ]; then
            FILE_TO_UPLOAD="report_xml.xml"
            echo "Using XML format"
          else
            echo "No ZAP report file found to upload"
            exit 0
          fi
          
          echo "File: $FILE_TO_UPLOAD"
          echo "Size: $(ls -lh $FILE_TO_UPLOAD | awk '{print $5}')"
          echo "Engagement ID: ${{ steps.create_engagement.outputs.engagement_id }}"
          
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "${DD_HOST}/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DD_API_TOKEN }}" \
            -F "scan_type=ZAP Scan" \
            -F "file=@${FILE_TO_UPLOAD}" \
            -F "engagement=${{ steps.create_engagement.outputs.engagement_id }}" \
            -F "scan_date=${{ steps.metadata.outputs.scan_date }}" \
            -F "active=true" \
            -F "verified=false" \
            -F "test_title=OWASP ZAP DAST - ${{ steps.metadata.outputs.commit_sha }}")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep -oP 'HTTP_CODE:\K\d+' || echo "0")
          RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_CODE:.*//')
          
          echo "=== Response ==="
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "✓ ZAP results uploaded successfully to DefectDojo"
          else
            echo "✗ Upload failed with HTTP $HTTP_CODE"
          fi
        continue-on-error: true

      - name: Evaluate DAST severity
        if: always()
        id: eval-dast
        run: |
          if [ -f "report_json.json" ]; then
            high=$(jq '[.site[].alerts[]? | select(.riskdesc | startswith("High"))] | length' report_json.json 2>/dev/null || echo 0)
            echo "High-risk vulnerabilities: $high"
            echo "high=$high" >> $GITHUB_OUTPUT
          else
            echo "No DAST report found."
            echo "high=0" >> $GITHUB_OUTPUT
          fi
      
      # -------------------------------
      # PHASE 8: REPORTING
      # -------------------------------
      - name: Upload ZAP reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap_dast_reports
          path: |
            report_html.html
            report_json.json
            report_md.md
            report_xml.xml
            zap-results.sarif
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload All Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ steps.metadata.outputs.commit_sha }}
          path: |
            semgrep.json
            semgrep.sarif
            trivy-iac.json
            tfsec-results.sarif
            trivy-results.json
            trivy-results.sarif
            report_html.html
            report_json.json
            report_md.md
            report_xml.xml
            zap-results.sarif
          retention-days: 90
          if-no-files-found: ignore

      # -------------------------------
      # PHASE 9: CLEANUP
      # -------------------------------
      - name: Cleanup test container
        if: always()
        run: |
          docker rm -f test-app || true
          docker system prune -f || true
          echo "Cleaned up test container."

      - name: Fail pipeline on high-risk DAST vulnerabilities
        if: steps.eval-dast.outputs.high != '0'
        run: |
          echo "HIGH-RISK DAST VULNERABILITIES DETECTED!"
          echo "Found ${{ steps.eval-dast.outputs.high }} high-risk issues."
          echo "Check artifacts and GitHub Security Dashboard."
          echo "Review findings in DefectDojo: ${DD_HOST}"
          exit 1

      # -------------------------------
      # PHASE 10: Summary Report
      # -------------------------------
      - name: Generate Summary Report
        if: always()
        run: |
          cat > $GITHUB_STEP_SUMMARY << EOF
          # Security Scan Summary
          
          **Engagement:** \`${{ steps.metadata.outputs.engagement_name }}\`  
          **Branch:** \`${{ steps.metadata.outputs.branch }}\`  
          **Commit:** \`${{ steps.metadata.outputs.commit_sha }}\`  
          **Date:** ${{ steps.metadata.outputs.scan_date }} ${{ steps.metadata.outputs.scan_time }}
          
          ## Scan Results
          
          | Scan Type | Status | Critical | High | Notes |
          |-----------|--------|----------|------|-------|
          | Semgrep (SAST) | Complete | - | - | Static code analysis |
          | Trivy IaC | Complete | - | - | Infrastructure security |
          | Trivy Image (SCA) | Complete | ${{ steps.eval.outputs.critical }} | ${{ steps.eval.outputs.high }} | Container vulnerabilities |
          | OWASP ZAP (DAST) | Complete | - | ${{ steps.eval-dast.outputs.high }} | Dynamic application scan |
          
          ## Quick Links
          
          - [DefectDojo Dashboard](${DD_HOST}/product/1)
          - [GitHub Security Tab](https://github.com/${{ github.repository }}/security/code-scanning)
          - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## Action Required
          
          $(if [ "${{ steps.eval.outputs.critical }}" != "0" ]; then
            echo "⚠️ **CRITICAL**: Fix ${{ steps.eval.outputs.critical }} critical vulnerabilities immediately"
          fi)
          $(if [ "${{ steps.eval-dast.outputs.high }}" != "0" ]; then
            echo "⚠️ **HIGH**: Address ${{ steps.eval-dast.outputs.high }} high-risk DAST issues"
          fi)
          $(if [ "${{ steps.eval.outputs.critical }}" = "0" ] && [ "${{ steps.eval-dast.outputs.high }}" = "0" ]; then
            echo "✅ No critical or high-risk issues detected"
          fi)
          
          ---
          
          📊 Review detailed findings in DefectDojo for remediation guidance.
          EOF
