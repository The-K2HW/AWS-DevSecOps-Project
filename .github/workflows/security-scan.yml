name: Security Scan (SAST, SCA & IaC)

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PRODUCT_NAME: ${{ secrets.DD_PRODUCT_NAME }}
  DD_HOST: ${{ secrets.DD_HOST }}
  TZ: "Europe/Paris"

jobs:
  security-scan:
    name: Security Scan Pipeline
    runs-on: ubuntu-latest

    steps:
      # -------------------------------
      # PHASE 1: PREPARATION
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set Scan Metadata
        id: metadata
        run: |
          echo "scan_date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "scan_time=$(date +%H:%M:%S)" >> $GITHUB_OUTPUT
          echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          ENGAGEMENT="${GITHUB_REF#refs/heads/}-$(date +%Y%m%d-%H%M%S)"
          echo "engagement_name=$ENGAGEMENT" >> $GITHUB_OUTPUT
          echo "Scan Metadata:"
          echo "  Date: $(date +%Y-%m-%d)"
          echo "  Branch: ${GITHUB_REF#refs/heads/}"
          echo "  Commit: $(git rev-parse --short HEAD)"
          echo "  Engagement: $ENGAGEMENT"
          	
      # -------------------------------
      # PHASE 2: STATIC ANALYSIS
      # -------------------------------
      - name: Run Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/php"
          audit_on: "push"
          generateSarif: true
        continue-on-error: true
        
      - name: Upload Semgrep to GitHub Security Dashboard
        if: always() && hashFiles('semgrep.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep-sast
        continue-on-error: true
        
       - name: Upload Semgrep to DefectDojo
        if: always() && hashFiles('semgrep.sarif') != ''
        run: |
          echo "Uploading Semgrep results to DefectDojo..."
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "${DD_HOST}/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DD_API_TOKEN }}" \
            -F "scan_type=Semgrep JSON Report" \
            -F "file=@semgrep.sarif" \
            -F "product_name=${PRODUCT_NAME}" \
            -F "engagement_name=${{ steps.metadata.outputs.engagement_name }}" \
            -F "scan_date=${{ steps.metadata.outputs.scan_date }}" \
            -F "active=true" \
            -F "verified=false" \
            -F "close_old_findings=false" \
            -F "test_title=Semgrep SAST - ${{ steps.metadata.outputs.commit_sha }}" \
            -F "branch_tag=${{ steps.metadata.outputs.branch }}" \
            -F "commit_hash=${{ github.sha }}" \
            -F "build_id=${{ github.run_number }}")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep -oP 'HTTP_CODE:\K\d+' || echo "0")
          
          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "Semgrep uploaded successfully to DefectDojo"
          else
            echo "Warning: Upload returned HTTP $HTTP_CODE"
            echo "$RESPONSE"
          fi
        continue-on-error: true               
      # -------------------------------
      # Step 3: Run Trivy IaC Scan (Terraform security)
      # -------------------------------
      - name: Run Trivy IaC Scan (Terraform)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: ./infra
          format: 'sarif'
          output: 'tfsec-results.sarif'
          exit-code: '0'
          severity: 'HIGH,CRITICAL'
          policy: './policy.rego'
          namespaces: 'trivy.ignore'

      # Upload IaC scan results
      - name: Upload Trivy IaC results to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec-results.sarif
          category: trivy-iac            

      # -------------------------------
      # Step 4: Login to Docker Hub
      # -------------------------------
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # -------------------------------
      # Step 5: Build Docker image
      # -------------------------------
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest .

      # -------------------------------
      # Step 6: Run Trivy Image Scan (SCA)
      # -------------------------------
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'vuln,secret'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'

      # -------------------------------
      # Step 7: Upload Trivy results to GitHub Security Dashboard
      # -------------------------------
      - name: Upload Trivy scan results to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy-image          

      # -------------------------------
      # Step 8: Evaluate CRITICAL vulnerabilities
      # -------------------------------
      - name: Evaluate vulnerability severity
        id: eval
        run: |
          critical=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.sarif || echo 0)
          echo "Detected $critical critical vulnerabilities."
          echo "critical=$critical" >> $GITHUB_OUTPUT

      # -------------------------------
      # Step 9: Fail pipeline if CRITICAL vulnerabilities exist
      # -------------------------------
      - name: Fail pipeline on critical vulnerabilities
        if: ${{ steps.eval.outputs.critical != '0' }}
        run: |
          echo "CRITICAL VULNERABILITIES FOUND: Security scan failed. Check trivy-results.sarif."
          exit 1

      # -------------------------------
      # Step 10: Push Docker image (only if scan passes)
      # -------------------------------
      - name: Push Docker image
        if: success()
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest

      # -------------------------------
      # Step 11: Start application container for DAST
      # -------------------------------
      - name: Start application container for DAST
        run: |
          echo "Starting PHP application for DAST..."
          docker run -d --name test-app \
            -p 8080:80 \
            --health-cmd="curl -fs http://localhost:80 || exit 1" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=10 \
            ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest
      
          echo "Waiting for the app to become healthy..."
          timeout 60 bash -c 'until docker inspect --format="{{.State.Health.Status}}" test-app | grep -q "healthy"; do sleep 3; done'
          echo "Application is ready for DAST scanning."
      
      # -------------------------------
      # Step 12: Run OWASP ZAP Full Scan manually
      # -------------------------------
      - name: Fix workspace permissions for ZAP
        run: sudo chmod -R 777 ${{ github.workspace }}
        
      - name: Run OWASP ZAP Full Scan (manual Docker)
        run: |
          echo "Running ZAP full scan manually to avoid artifact upload bug..."
          docker run --rm -v $(pwd):/zap/wrk/:rw --network=host \
            ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
            -t http://localhost:8080 \
            -J report_json.json \
            -w report_md.md \
            -r report_html.html \
            -I \
            -a -j -l WARN -T 30 \
            -z "-config spider.maxDuration=5 -config ajaxSpider.maxDuration=3"

          echo "ZAP scan completed. Reports generated:"
          ls -lh report_*

      # -------------------------------
      # Step 13: Convert ZAP JSON to SARIF
      # -------------------------------
      - name: Convert ZAP JSON to SARIF format
        if: always()
        run: |
          python3 <<'PYTHON_SCRIPT'
          import json, os
      
          if not os.path.exists("report_json.json"):
              print("No ZAP report found, creating empty SARIF")
              empty = {
                  "version": "2.1.0",
                  "runs": [{
                      "tool": {"driver": {"name": "OWASP ZAP"}},
                      "results": []
                  }]
              }
              json.dump(empty, open("zap-results.sarif", "w"), indent=2)
              exit(0)
      
          zap = json.load(open("report_json.json"))
          risk_map = {"High": "error", "Medium": "warning", "Low": "note"}
          rules, results = {}, []
      
          os.makedirs("zap_scan", exist_ok=True)
      
          for site in zap.get("site", []):
              for alert in site.get("alerts", []):
                  pid = str(alert.get("pluginid"))
                  name = alert.get("name", "Unknown")
                  risk = alert.get("riskdesc", "Low").split()[0]
      
                  if pid not in rules:
                      rules[pid] = {
                          "id": pid,
                          "name": name,
                          "shortDescription": {"text": name}
                      }
      
                  for inst in alert.get("instances", []):
                      uri = inst.get("uri", "unknown")
                      file_path = "zap_scan/" + os.path.basename(uri)
      
                      results.append({
                          "ruleId": pid,
                          "level": risk_map.get(risk, "note"),
                          "message": {"text": name},
                          "locations": [{
                              "physicalLocation": {
                                  "artifactLocation": {
                                      "uri": file_path,
                                      "uriBaseId": "PROJECTROOT"
                                  }
                              }
                          }]
                      })
      
          sarif = {
              "version": "2.1.0",
              "runs": [{
                  "tool": {"driver": {
                      "name": "OWASP ZAP",
                      "rules": list(rules.values())
                  }},
                  "results": results
              }]
          }
      
          json.dump(sarif, open("zap-results.sarif", "w"), indent=2)
          print(f"SARIF created with {len(results)} findings.")
          PYTHON_SCRIPT

      
      # -------------------------------
      # Step 14: Upload DAST results to GitHub Security Dashboard
      # -------------------------------
      - name: Upload ZAP SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-results.sarif
          category: owasp-zap-dast
        continue-on-error: true
      
      # -------------------------------
      # Step 15: Evaluate DAST severity
      # -------------------------------
      - name: Evaluate DAST severity
        if: always()
        id: eval-dast
        run: |
          if [ -f "report_json.json" ]; then
            high=$(jq '[.site[].alerts[]? | select(.riskdesc | startswith("High"))] | length' report_json.json)
            echo "High-risk vulnerabilities: $high"
            echo "high=$high" >> $GITHUB_OUTPUT
          else
            echo "No DAST report found."
            echo "high=0" >> $GITHUB_OUTPUT
          fi
      
      # -------------------------------
      # Step 16: Upload ZAP Reports (manual artifact upload)
      # -------------------------------
      - name: Upload ZAP reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap_dast_reports
          path: |
            report_html.html
            report_json.json
            report_md.md
            zap-results.sarif
          retention-days: 30
      
      # -------------------------------
      # Step 17: Cleanup test container
      # -------------------------------
      - name: Cleanup test container
        if: always()
        run: |
          docker rm -f test-app || true
          docker system prune -f || true
          echo "Cleaned up test container."
      
      # -------------------------------
      # Step 18: Fail pipeline on high-risk vulnerabilities
      # -------------------------------
      - name: Fail pipeline on high-risk DAST vulnerabilities
        if: ${{ steps.eval-dast.outputs.high != '0' }}
        run: |
          echo "HIGH-RISK DAST VULNERABILITIES DETECTED!"
          echo "Found ${{ steps.eval-dast.outputs.high }} high-risk issues."
          echo "Check artifacts and GitHub Security Dashboard."
          exit 1
