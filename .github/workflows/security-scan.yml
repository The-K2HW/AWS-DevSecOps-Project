name: Security Scan (SAST & SCA)

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Security Scan Pipeline
    runs-on: ubuntu-latest

    steps:
      # -------------------------------
      # Step 1: Checkout repository
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # -------------------------------
      # Step 2: Set up AWS CLI (to confirm identity)
      # -------------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      # -------------------------------
      # Step 3: Initialize CodeQL (SAST)
      # -------------------------------
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'php'
          queries: security-and-quality

      # -------------------------------
      # Step 4: Autobuild and Analyze CodeQL
      # -------------------------------
      - name: Autobuild Code
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:php"

      # -------------------------------
      # Step 5: Docker login 
      # -------------------------------
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # -------------------------------
      # Step 6: Build Docker image
      # -------------------------------
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest .

      # -------------------------------
      # Step 7: Run Trivy Scan (SCA)
      # -------------------------------
      - name: Scan image for vulnerabilities (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'   # Fail the pipeline if critical vulnerabilities are found

      # -------------------------------
      # Step 8: Push image to Docker Hub (only if all scans passed)
      # -------------------------------
      - name: Push Docker image
        if: success()
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/research-app:latest
